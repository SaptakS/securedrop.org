# -*- coding: utf-8 -*-
# Generated by Django 1.11.11 on 2018-04-19 14:10
from __future__ import unicode_literals

from django.db import migrations


def forwards(apps, schema_editor):
    """
    Move all data from Topic, Country, and Language to TemporaryTopic,
    TemporaryCountry, and TemporaryLanguage
    """

    TemporaryTopic = apps.get_model('directory', 'TemporaryTopic')
    TemporaryCountry = apps.get_model('directory', 'TemporaryCountry')
    TemporaryLanguage = apps.get_model('directory', 'TemporaryLanguage')
    Topic = apps.get_model('directory', 'Topic')
    Country = apps.get_model('directory', 'Country')
    Language = apps.get_model('directory', 'Language')
    DirectoryEntry = apps.get_model('directory', 'DirectoryEntry')

    # Copy topics table over
    new_temporary_topics = []
    for topic in Topic.objects.all():
        new_temporary_topics.append(TemporaryTopic(title=topic.title))
    TemporaryTopic.objects.bulk_create(new_temporary_topics)

    # Copy countries table over
    new_temporary_countries = []
    for country in Country.objects.all():
        new_temporary_countries.append(TemporaryCountry(title=country.title))
    TemporaryCountry.objects.bulk_create(new_temporary_countries)

    # Copy languages over
    new_temporary_languages = []
    for language in Language.objects.all():
        new_temporary_languages.append(TemporaryLanguage(title=language.title))
    TemporaryLanguage.objects.bulk_create(new_temporary_languages)

    # Move DirectoryEntry fks
    for entry in DirectoryEntry.objects.all():
        topic_titles = list(entry.topics.values_list('title', flat=True))
        country_titles = list(entry.countries.values_list('title', flat=True))
        language_titles = list(entry.languages.values_list('title', flat=True))
        entry.temporary_topics.set(
            TemporaryTopic.objects.filter(title__in=topic_titles)
        )
        entry.temporary_countries.set(
            TemporaryCountry.objects.filter(title__in=country_titles)
        )
        entry.temporary_languages.set(
            TemporaryLanguage.objects.filter(title__in=language_titles)
        )

    Topic.objects.all().delete()
    Country.objects.all().delete()
    Language.objects.all().delete()


def backwards(apps, schema_editor):
    """
    Move all data from TemporaryTopic, TemporaryCountry, and TemporaryLanguage
    to Topic, Country, and Language
    """

    TemporaryTopic = apps.get_model('directory', 'TemporaryTopic')
    TemporaryCountry = apps.get_model('directory', 'TemporaryCountry')
    TemporaryLanguage = apps.get_model('directory', 'TemporaryLanguage')
    Topic = apps.get_model('directory', 'Topic')
    Country = apps.get_model('directory', 'Country')
    Language = apps.get_model('directory', 'Language')
    DirectoryEntry = apps.get_model('directory', 'DirectoryEntry')

    # Copy topics table over
    new_topics = []
    for temporary_topic in TemporaryTopic.objects.all():
        new_topics.append(Topic(title=temporary_topic.title))
    Topic.objects.bulk_create(new_topics)

    # Copy countries table over
    new_countries = []
    for temporary_country in TemporaryCountry.objects.all():
        new_countries.append(Country(title=temporary_country.title))
    Country.objects.bulk_create(new_countries)

    # Copy languages over
    new_languages = []
    for languages in TemporaryLanguage.objects.all():
        new_languages.append(Language(title=new_languages.title))
    Language.objects.bulk_create(new_languages)

    # Move DirectoryEntry fks
    for entry in DirectoryEntry.objects.all():
        topic_titles = list(entry.temporary_topics.values_list('title', flat=True))
        country_titles = list(entry.temporary_countries.values_list('title', flat=True))
        language_titles = list(entry.temporary_languages.values_list('title', flat=True))
        entry.topics.set(
            Topic.objects.filter(title__in=topic_titles)
        )
        entry.countries.set(
            Country.objects.filter(title__in=country_titles)
        )
        entry.languages.set(
            Language.objects.filter(title__in=language_titles)
        )

    TemporaryTopic.objects.all().delete()
    TemporaryCountry.objects.all().delete()
    TemporaryLanguage.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('directory', '0014_make_temp_taxonomies'),
    ]

    operations = [
        migrations.RunPython(forwards, backwards),
    ]
