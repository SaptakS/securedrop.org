# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2017-10-26 20:01
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.contrib.wagtailroutablepage.models
import wagtail.wagtailcore.fields
import wagtailmetadata.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0040_page_draft_title'),
        ('common', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DirectoryPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('body', wagtail.wagtailcore.fields.RichTextField(blank=True, null=True)),
                ('source_warning', wagtail.wagtailcore.fields.RichTextField(blank=True, help_text='A warning for sources about checking onion addresses.', null=True)),
                ('submit_title', models.CharField(default='Want to get your instance listed?', max_length=255)),
                ('submit_body', wagtail.wagtailcore.fields.RichTextField(blank=True, null=True)),
                ('submit_button_text', models.CharField(default='Get Started', help_text='Text displayed on link to scanning form.', max_length=100)),
                ('manage_instances_text', models.CharField(default='Manage instances', help_text='Text displayed on link to user dashboard.', max_length=100)),
                ('per_page', models.PositiveSmallIntegerField(default=10, help_text='Number of news stories to display per page', validators=[django.core.validators.MaxValueValidator(25)])),
                ('orphans', models.PositiveSmallIntegerField(default=2, help_text='Minimum number of stories on the last page (if the last page is smaller, they will get added to the preceding page)', validators=[django.core.validators.MaxValueValidator(5)])),
                ('scanner_form_title', models.CharField(default='Scan', max_length=100)),
                ('scanner_form_text', wagtail.wagtailcore.fields.RichTextField(blank=True, null=True)),
                ('org_details_form_title', models.CharField(default='Enter organization details', max_length=100)),
                ('org_details_form_text', wagtail.wagtailcore.fields.RichTextField(blank=True, null=True)),
                ('thank_you_title', models.CharField(default='Thank you', max_length=100)),
                ('thank_you_text', wagtail.wagtailcore.fields.RichTextField(blank=True, null=True)),
                ('faq_link', models.ForeignKey(blank=True, help_text="Linked to by the info icon next to 'Security' in the directory table headers.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page')),
                ('search_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='common.CustomImage')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.wagtailroutablepage.models.RoutablePageMixin, wagtailmetadata.models.MetadataMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='ResultGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Will be displayed as the group heading.', max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResultState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(help_text='Must be a field in the landing_page_checker.Result model.', max_length=255)),
                ('success_text', wagtail.wagtailcore.fields.RichTextField()),
                ('failure_text', wagtail.wagtailcore.fields.RichTextField()),
                ('is_warning', models.BooleanField(help_text='If checked, will display a flag and yellow text. If left unchecked, will display an x and red text.')),
                ('fix_text', wagtail.wagtailcore.fields.RichTextField(blank=True, null=True)),
                ('result_group', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='result_states', to='directory.ResultGroup')),
            ],
            options={
                'abstract': False,
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('baseitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='directory.BaseItem')),
            ],
            options={
                'abstract': False,
            },
            bases=('directory.baseitem',),
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('baseitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='directory.BaseItem')),
            ],
            options={
                'abstract': False,
            },
            bases=('directory.baseitem',),
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('baseitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='directory.BaseItem')),
            ],
            options={
                'abstract': False,
            },
            bases=('directory.baseitem',),
        ),
    ]
